name: Download Workflow Logs for Multiple Runners

on:
  workflow_dispatch:
    inputs:
      runner_id_1:
        description: "ID of the first runner"
        required: true
      runner_id_2:
        description: "ID of the second runner"
        required: true

jobs:
  download-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download logs for the first runner
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET_TOKEN }}
          RUNNER_ID: ${{ inputs.runner_id_1 }}
          REPO: pavvi17/helm-core-framework
        run: |
          echo "Downloading logs for runner ID: $RUNNER_ID"
          curl -L -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/$REPO/actions/runs/$RUNNER_ID/logs" \
               -o runner_${RUNNER_ID}_logs.zip
          # Validate the response
          if [ ! -s runner_${RUNNER_ID}_logs.zip ]; then
            echo "Error: Logs file is empty for runner ID $RUNNER_ID. Check the runner ID and permissions."
            exit 1
          fi
          # Check if the downloaded file is a valid ZIP archive
          if ! unzip -tq runner_${RUNNER_ID}_logs.zip; then
            echo "Error: Downloaded file for runner ID $RUNNER_ID is not a valid ZIP archive."
            exit 1
          fi
          # Unzip the logs
          mkdir -p logs/runner_${RUNNER_ID}
          unzip runner_${RUNNER_ID}_logs.zip -d logs/runner_${RUNNER_ID}
      - name: Upload Logs for Runner 1
        uses: actions/upload-artifact@v3
        with:
          name: runner-${{ inputs.runner_id_1 }}-logs
          path: logs/runner_${{ inputs.runner_id_1 }}

      - name: Download logs for the second runner
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET_TOKEN }}
          RUNNER_ID: ${{ inputs.runner_id_2 }}
          REPO: pavvi17/helm-core-framework
        run: |
          echo "Downloading logs for runner ID: $RUNNER_ID"
          curl -L -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/$REPO/actions/runs/$RUNNER_ID/logs" \
               -o runner_${RUNNER_ID}_logs.zip
          # Validate the response
          if [ ! -s runner_${RUNNER_ID}_logs.zip ]; then
            echo "Error: Logs file is empty for runner ID $RUNNER_ID. Check the runner ID and permissions."
            exit 1
          fi
          # Check if the downloaded file is a valid ZIP archive
          if ! unzip -tq runner_${RUNNER_ID}_logs.zip; then
            echo "Error: Downloaded file for runner ID $RUNNER_ID is not a valid ZIP archive."
            exit 1
          fi
          # Unzip the logs
          mkdir -p logs/runner_${RUNNER_ID}
          unzip runner_${RUNNER_ID}_logs.zip -d logs/runner_${RUNNER_ID}
      - name: Upload Logs for Runner 2
        uses: actions/upload-artifact@v3
        with:
          name: runner-${{ inputs.runner_id_2 }}-logs
          path: logs/runner_${{ inputs.runner_id_2 }}

      - name: Download Uploaded Artifact for Runner 1
        uses: actions/download-artifact@v3
        with:
          name: runner-${{ inputs.runner_id_1 }}-logs
          path: downloaded-artifacts/runner_${{ inputs.runner_id_1 }}

      - name: Download Uploaded Artifact for Runner 2
        uses: actions/download-artifact@v3
        with:
          name: runner-${{ inputs.runner_id_2 }}-logs
          path: downloaded-artifacts/runner_${{ inputs.runner_id_2 }}

      - name: Verify Downloaded Artifacts
        run: |
          echo "Listing contents of downloaded artifacts:"
          ls -R downloaded-artifacts
          
      - name: Remove Timestamps from Files
        run: |
          echo "Removing timestamps from files..."
          echo "Listing all files in downloaded-artifacts:"
          ls -R downloaded-artifacts

          files_found=false
          for file in downloaded-artifacts/runner_${{ inputs.runner_id_1 }}/download-logs/*; do
              if [[ -f "$file" ]]; then
                  files_found=true
                  echo "Processing $file"
                  sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+Z //' "$master_branch" > temp_file && mv temp_file "$master_branch"
                  echo "Timestamps removed from $master_branch"
                  echo "Contents of $master_branch:"
                  cat "$master_branch"
              fi
          for file in downloaded-artifacts/runner_${{ inputs.runner_id_2 }}/download-logs/*; do
              if [[ -f "$file" ]]; then
                  files_found=true
                  echo "Processing $file"
                  sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+Z //' "$Branch_2" > temp_file && mv temp_file "$Branch_2"
                  echo "Timestamps removed from $Branch_2"
                  echo "Contents of $Branch_2:"
                  cat "$Branch_2"
              fi
          done

          if [[ "$files_found" = false ]]; then
              echo "No files found matching the pattern 'downloaded-artifacts/runner_*/download-logs/*'."
          fi


      # - name: Verify Downloaded Artifacts
      #   run: |
      #     echo "Listing contents of downloaded artifacts after timestamp removal:"
      #     ls -R downloaded-artifacts;
      #     cat "downloaded-artifacts/runner_12581139515/download-logs/1_Set up job.txt"


      # - uses: actions/checkout@v4
      #   with:
      #     ref: main
      #     sparse-checkout: |
      #       scripts
      #     clean: true

      # - name: Check content
      #   run: |
      #     ls ; pwd ;
      #     chmod +x scripts/timestamp_script.sh
      #     ./scripts/timestamp_script.sh downloaded-artifacts/runner_${{ inputs.runner_id_1 }}/download-logs/"1_Set up job.txt" downloaded-artifacts/runner_${{ inputs.runner_id_2 }}/download-logs/"1_Set up job.txt"
      #     ls -R;
